{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"13b7Gvsad2aWpRiaEE1zBTgp-eB5QJFzT","timestamp":1641975103149},{"file_id":"https://github.com/bnsreenu/python_for_image_processing_APEER/blob/master/tutorial119_multiclass_semantic_segmentation.ipynb","timestamp":1641386558608}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"I0NRq8jOY5bX","executionInfo":{"status":"ok","timestamp":1683305965553,"user_tz":-330,"elapsed":28,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["#from keras.utils import normalize\n","import os\n","import glob\n","import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt"],"execution_count":1,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"slivzl8gRNig","executionInfo":{"status":"ok","timestamp":1683305988580,"user_tz":-330,"elapsed":23048,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}},"outputId":"27478f96-30c3-4470-f371-bed4ec37ccec"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"3MJ7xjSDZDJZ","executionInfo":{"status":"ok","timestamp":1683306006098,"user_tz":-330,"elapsed":477,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["#Resizing images, if needed\n","SIZE_X = 256 \n","SIZE_Y = 256\n","n_classes=4 #Number of classes for segmentation\n","num_images = 1512  #Total 1600 available"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"e-qxgNa8ZQ_H","executionInfo":{"status":"ok","timestamp":1683306013390,"user_tz":-330,"elapsed":5079,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["image_names = glob.glob(\"/content/drive/MyDrive/Colab Notebooks/image/*.jpg\")\n","image_names.sort()\n","image_names_subset = image_names[0:num_images]\n","images = [cv2.imread(image, 0) for image in image_names_subset]\n","image_dataset = np.array(images)\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","source":["print(image_dataset.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GAg2sA4eUUBu","executionInfo":{"status":"ok","timestamp":1683306018109,"user_tz":-330,"elapsed":673,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}},"outputId":"2f052503-88ac-4455-94a2-0637fdd54a4a"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["(1512, 256, 256)\n"]}]},{"cell_type":"code","source":["image_dataset = np.expand_dims(image_dataset, axis = 3)"],"metadata":{"id":"_IS--4HwT6V1","executionInfo":{"status":"ok","timestamp":1683306021277,"user_tz":-330,"elapsed":18,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"JMVZCMFPZGPX","executionInfo":{"status":"ok","timestamp":1683306048242,"user_tz":-330,"elapsed":24659,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["mask_names = glob.glob(\"/content/drive/MyDrive/Colab Notebooks/PixelLabelData/*.png\")\n","mask_names.sort()\n","mask_names_subset = mask_names[0:num_images]\n","masks = [cv2.imread(mask, 0) for mask in mask_names_subset]\n","mask_dataset = np.array(masks)\n"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QzAouaVaZoVg","outputId":"9ad1330d-6386-47f9-a333-e931ab0fd61f","executionInfo":{"status":"ok","timestamp":1683306049989,"user_tz":-330,"elapsed":1760,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["print(\"Image data shape is: \", image_dataset.shape)\n","print(\"Mask data shape is: \", mask_dataset.shape)\n","print(\"Max pixel value in image is: \", image_dataset.max())\n","print(\"Labels in the mask are : \", np.unique(mask_dataset))"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Image data shape is:  (1512, 256, 256, 1)\n","Mask data shape is:  (1512, 256, 256)\n","Max pixel value in image is:  255\n","Labels in the mask are :  [0 1 2 3]\n"]}]},{"cell_type":"code","source":["print(\"Labels in the mask are : \", np.unique(mask_dataset))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AjsGeziBV7LE","executionInfo":{"status":"ok","timestamp":1683306051943,"user_tz":-330,"elapsed":1981,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}},"outputId":"2bad196d-1c4c-418d-8ff2-01189f51b3e2"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Labels in the mask are :  [0 1 2 3]\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QDQ_8v3FhENA","outputId":"2cddbe6f-8b82-4cd1-b19d-8098f50e786d","executionInfo":{"status":"ok","timestamp":1683306051945,"user_tz":-330,"elapsed":14,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["mask_dataset = np.expand_dims(mask_dataset, axis = 3)\n","print(mask_dataset.shape)"],"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["(1512, 256, 256, 1)\n"]}]},{"cell_type":"code","metadata":{"id":"9SgFwOThZs_A","executionInfo":{"status":"ok","timestamp":1683306052757,"user_tz":-330,"elapsed":819,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["#Normalize images\n","image_dataset = image_dataset /255.  #Can also normalize or scale using MinMax scaler"],"execution_count":13,"outputs":[]},{"cell_type":"code","metadata":{"id":"IMZPM7edZ4nN","executionInfo":{"status":"ok","timestamp":1683306053660,"user_tz":-330,"elapsed":911,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["#Split training data\n","from sklearn.model_selection import train_test_split\n","X_train, X_test, y_train, y_test = train_test_split(image_dataset, mask_dataset, test_size = 0.2, random_state = 42)"],"execution_count":14,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"fSUFyhtGWRUL","executionInfo":{"status":"ok","timestamp":1683306053663,"user_tz":-330,"elapsed":22,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","metadata":{"id":"Yh2fI72laFn1","executionInfo":{"status":"ok","timestamp":1683306058181,"user_tz":-330,"elapsed":4536,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["from tensorflow.keras.utils import to_categorical\n","train_masks_cat = to_categorical(y_train, num_classes=n_classes)\n","y_train_cat = train_masks_cat.reshape((y_train.shape[0], y_train.shape[1], y_train.shape[2], n_classes))\n","\n","test_masks_cat = to_categorical(y_test, num_classes=n_classes)\n","y_test_cat = test_masks_cat.reshape((y_test.shape[0], y_test.shape[1], y_test.shape[2], n_classes))\n","\n"],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CDMoprb5hrvY","outputId":"d48904db-ed91-47b3-d03b-13a05106dddd","executionInfo":{"status":"ok","timestamp":1683306058183,"user_tz":-330,"elapsed":29,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["print(y_train_cat.shape)"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(1209, 256, 256, 4)\n"]}]},{"cell_type":"code","metadata":{"id":"CNEIG7sKaR0D","executionInfo":{"status":"ok","timestamp":1683306058184,"user_tz":-330,"elapsed":23,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["# Building Unet by dividing encoder and decoder into blocks\n","\n","from keras.models import Model\n","from keras.layers import Input, Conv2D, MaxPooling2D, UpSampling2D, concatenate, Conv2DTranspose, BatchNormalization, Dropout, Lambda\n","from tensorflow.keras.optimizers import Adam\n","from keras.layers import Activation, MaxPool2D, Concatenate\n","\n","\n","def conv_block(input, num_filters):\n","    x = Conv2D(num_filters, 3, padding=\"same\")(input)\n","    x = BatchNormalization()(x)   #Not in the original network. \n","    x = Activation(\"relu\")(x)\n","\n","    x = Conv2D(num_filters, 3, padding=\"same\")(x)\n","    x = BatchNormalization()(x)  #Not in the original network\n","    x = Activation(\"relu\")(x)\n","\n","    return x\n","\n","#Encoder block: Conv block followed by maxpooling\n","\n","\n","def encoder_block(input, num_filters):\n","    x = conv_block(input, num_filters)\n","    p = MaxPool2D((2, 2))(x)\n","    return x, p   \n","\n","#Decoder block\n","#skip features gets input from encoder for concatenation\n","\n","def decoder_block(input, skip_features, num_filters):\n","    x = Conv2DTranspose(num_filters, (2, 2), strides=2, padding=\"same\")(input)\n","    x = Concatenate()([x, skip_features])\n","    x = conv_block(x, num_filters)\n","    return x\n","\n","#Build Unet using the blocks\n","def build_unet(input_shape, n_classes):\n","    inputs = Input(input_shape)\n","\n","    s1, p1 = encoder_block(inputs, 64)\n","    s2, p2 = encoder_block(p1, 128)\n","    s3, p3 = encoder_block(p2, 256)\n","    s4, p4 = encoder_block(p3, 512)\n","\n","    b1 = conv_block(p4, 1024) #Bridge\n","\n","    d1 = decoder_block(b1, s4, 512)\n","    d2 = decoder_block(d1, s3, 256)\n","    d3 = decoder_block(d2, s2, 128)\n","    d4 = decoder_block(d3, s1, 64)\n","\n","    if n_classes == 1:  #Binary\n","      activation = 'sigmoid'\n","    else:\n","      activation = 'softmax'\n","\n","    outputs = Conv2D(n_classes, 1, padding=\"same\", activation=activation)(d4)  #Change the activation based on n_classes\n","    print(activation)\n","\n","    model = Model(inputs, outputs, name=\"U-Net\")\n","    return model"],"execution_count":17,"outputs":[]},{"cell_type":"code","metadata":{"id":"o3IGtgOAaJcC","executionInfo":{"status":"ok","timestamp":1683306058185,"user_tz":-330,"elapsed":20,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["IMG_HEIGHT = X_train.shape[1]\n","IMG_WIDTH  = X_train.shape[2]\n","IMG_CHANNELS = X_train.shape[3]\n","input_shape = (IMG_HEIGHT, IMG_WIDTH, IMG_CHANNELS)"],"execution_count":18,"outputs":[]},{"cell_type":"code","source":["print(input_shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t6P33iOaXHwU","executionInfo":{"status":"ok","timestamp":1683306058186,"user_tz":-330,"elapsed":20,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}},"outputId":"9bc0bf3e-8dff-4534-f998-5bf5a1705dd7"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["(256, 256, 1)\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HcQp3wxCaTZw","outputId":"784175ce-054c-4b0f-e047-717ccc7c873e","executionInfo":{"status":"ok","timestamp":1683306063357,"user_tz":-330,"elapsed":5183,"user":{"displayName":"ashish RajAnand","userId":"11376908211845103811"}}},"source":["model = build_unet(input_shape, n_classes=4 )\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n","model.summary()"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stdout","text":["softmax\n","Model: \"U-Net\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," input_1 (InputLayer)           [(None, 256, 256, 1  0           []                               \n","                                )]                                                                \n","                                                                                                  \n"," conv2d (Conv2D)                (None, 256, 256, 64  640         ['input_1[0][0]']                \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 256, 256, 64  256        ['conv2d[0][0]']                 \n"," alization)                     )                                                                 \n","                                                                                                  \n"," activation (Activation)        (None, 256, 256, 64  0           ['batch_normalization[0][0]']    \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_1 (Conv2D)              (None, 256, 256, 64  36928       ['activation[0][0]']             \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_1 (BatchNo  (None, 256, 256, 64  256        ['conv2d_1[0][0]']               \n"," rmalization)                   )                                                                 \n","                                                                                                  \n"," activation_1 (Activation)      (None, 256, 256, 64  0           ['batch_normalization_1[0][0]']  \n","                                )                                                                 \n","                                                                                                  \n"," max_pooling2d (MaxPooling2D)   (None, 128, 128, 64  0           ['activation_1[0][0]']           \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_2 (Conv2D)              (None, 128, 128, 12  73856       ['max_pooling2d[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," batch_normalization_2 (BatchNo  (None, 128, 128, 12  512        ['conv2d_2[0][0]']               \n"," rmalization)                   8)                                                                \n","                                                                                                  \n"," activation_2 (Activation)      (None, 128, 128, 12  0           ['batch_normalization_2[0][0]']  \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_3 (Conv2D)              (None, 128, 128, 12  147584      ['activation_2[0][0]']           \n","                                8)                                                                \n","                                                                                                  \n"," batch_normalization_3 (BatchNo  (None, 128, 128, 12  512        ['conv2d_3[0][0]']               \n"," rmalization)                   8)                                                                \n","                                                                                                  \n"," activation_3 (Activation)      (None, 128, 128, 12  0           ['batch_normalization_3[0][0]']  \n","                                8)                                                                \n","                                                                                                  \n"," max_pooling2d_1 (MaxPooling2D)  (None, 64, 64, 128)  0          ['activation_3[0][0]']           \n","                                                                                                  \n"," conv2d_4 (Conv2D)              (None, 64, 64, 256)  295168      ['max_pooling2d_1[0][0]']        \n","                                                                                                  \n"," batch_normalization_4 (BatchNo  (None, 64, 64, 256)  1024       ['conv2d_4[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_4 (Activation)      (None, 64, 64, 256)  0           ['batch_normalization_4[0][0]']  \n","                                                                                                  \n"," conv2d_5 (Conv2D)              (None, 64, 64, 256)  590080      ['activation_4[0][0]']           \n","                                                                                                  \n"," batch_normalization_5 (BatchNo  (None, 64, 64, 256)  1024       ['conv2d_5[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_5 (Activation)      (None, 64, 64, 256)  0           ['batch_normalization_5[0][0]']  \n","                                                                                                  \n"," max_pooling2d_2 (MaxPooling2D)  (None, 32, 32, 256)  0          ['activation_5[0][0]']           \n","                                                                                                  \n"," conv2d_6 (Conv2D)              (None, 32, 32, 512)  1180160     ['max_pooling2d_2[0][0]']        \n","                                                                                                  \n"," batch_normalization_6 (BatchNo  (None, 32, 32, 512)  2048       ['conv2d_6[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_6 (Activation)      (None, 32, 32, 512)  0           ['batch_normalization_6[0][0]']  \n","                                                                                                  \n"," conv2d_7 (Conv2D)              (None, 32, 32, 512)  2359808     ['activation_6[0][0]']           \n","                                                                                                  \n"," batch_normalization_7 (BatchNo  (None, 32, 32, 512)  2048       ['conv2d_7[0][0]']               \n"," rmalization)                                                                                     \n","                                                                                                  \n"," activation_7 (Activation)      (None, 32, 32, 512)  0           ['batch_normalization_7[0][0]']  \n","                                                                                                  \n"," max_pooling2d_3 (MaxPooling2D)  (None, 16, 16, 512)  0          ['activation_7[0][0]']           \n","                                                                                                  \n"," conv2d_8 (Conv2D)              (None, 16, 16, 1024  4719616     ['max_pooling2d_3[0][0]']        \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_8 (BatchNo  (None, 16, 16, 1024  4096       ['conv2d_8[0][0]']               \n"," rmalization)                   )                                                                 \n","                                                                                                  \n"," activation_8 (Activation)      (None, 16, 16, 1024  0           ['batch_normalization_8[0][0]']  \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_9 (Conv2D)              (None, 16, 16, 1024  9438208     ['activation_8[0][0]']           \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_9 (BatchNo  (None, 16, 16, 1024  4096       ['conv2d_9[0][0]']               \n"," rmalization)                   )                                                                 \n","                                                                                                  \n"," activation_9 (Activation)      (None, 16, 16, 1024  0           ['batch_normalization_9[0][0]']  \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_transpose (Conv2DTransp  (None, 32, 32, 512)  2097664    ['activation_9[0][0]']           \n"," ose)                                                                                             \n","                                                                                                  \n"," concatenate (Concatenate)      (None, 32, 32, 1024  0           ['conv2d_transpose[0][0]',       \n","                                )                                 'activation_7[0][0]']           \n","                                                                                                  \n"," conv2d_10 (Conv2D)             (None, 32, 32, 512)  4719104     ['concatenate[0][0]']            \n","                                                                                                  \n"," batch_normalization_10 (BatchN  (None, 32, 32, 512)  2048       ['conv2d_10[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_10 (Activation)     (None, 32, 32, 512)  0           ['batch_normalization_10[0][0]'] \n","                                                                                                  \n"," conv2d_11 (Conv2D)             (None, 32, 32, 512)  2359808     ['activation_10[0][0]']          \n","                                                                                                  \n"," batch_normalization_11 (BatchN  (None, 32, 32, 512)  2048       ['conv2d_11[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_11 (Activation)     (None, 32, 32, 512)  0           ['batch_normalization_11[0][0]'] \n","                                                                                                  \n"," conv2d_transpose_1 (Conv2DTran  (None, 64, 64, 256)  524544     ['activation_11[0][0]']          \n"," spose)                                                                                           \n","                                                                                                  \n"," concatenate_1 (Concatenate)    (None, 64, 64, 512)  0           ['conv2d_transpose_1[0][0]',     \n","                                                                  'activation_5[0][0]']           \n","                                                                                                  \n"," conv2d_12 (Conv2D)             (None, 64, 64, 256)  1179904     ['concatenate_1[0][0]']          \n","                                                                                                  \n"," batch_normalization_12 (BatchN  (None, 64, 64, 256)  1024       ['conv2d_12[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_12 (Activation)     (None, 64, 64, 256)  0           ['batch_normalization_12[0][0]'] \n","                                                                                                  \n"," conv2d_13 (Conv2D)             (None, 64, 64, 256)  590080      ['activation_12[0][0]']          \n","                                                                                                  \n"," batch_normalization_13 (BatchN  (None, 64, 64, 256)  1024       ['conv2d_13[0][0]']              \n"," ormalization)                                                                                    \n","                                                                                                  \n"," activation_13 (Activation)     (None, 64, 64, 256)  0           ['batch_normalization_13[0][0]'] \n","                                                                                                  \n"," conv2d_transpose_2 (Conv2DTran  (None, 128, 128, 12  131200     ['activation_13[0][0]']          \n"," spose)                         8)                                                                \n","                                                                                                  \n"," concatenate_2 (Concatenate)    (None, 128, 128, 25  0           ['conv2d_transpose_2[0][0]',     \n","                                6)                                'activation_3[0][0]']           \n","                                                                                                  \n"," conv2d_14 (Conv2D)             (None, 128, 128, 12  295040      ['concatenate_2[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," batch_normalization_14 (BatchN  (None, 128, 128, 12  512        ['conv2d_14[0][0]']              \n"," ormalization)                  8)                                                                \n","                                                                                                  \n"," activation_14 (Activation)     (None, 128, 128, 12  0           ['batch_normalization_14[0][0]'] \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_15 (Conv2D)             (None, 128, 128, 12  147584      ['activation_14[0][0]']          \n","                                8)                                                                \n","                                                                                                  \n"," batch_normalization_15 (BatchN  (None, 128, 128, 12  512        ['conv2d_15[0][0]']              \n"," ormalization)                  8)                                                                \n","                                                                                                  \n"," activation_15 (Activation)     (None, 128, 128, 12  0           ['batch_normalization_15[0][0]'] \n","                                8)                                                                \n","                                                                                                  \n"," conv2d_transpose_3 (Conv2DTran  (None, 256, 256, 64  32832      ['activation_15[0][0]']          \n"," spose)                         )                                                                 \n","                                                                                                  \n"," concatenate_3 (Concatenate)    (None, 256, 256, 12  0           ['conv2d_transpose_3[0][0]',     \n","                                8)                                'activation_1[0][0]']           \n","                                                                                                  \n"," conv2d_16 (Conv2D)             (None, 256, 256, 64  73792       ['concatenate_3[0][0]']          \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_16 (BatchN  (None, 256, 256, 64  256        ['conv2d_16[0][0]']              \n"," ormalization)                  )                                                                 \n","                                                                                                  \n"," activation_16 (Activation)     (None, 256, 256, 64  0           ['batch_normalization_16[0][0]'] \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_17 (Conv2D)             (None, 256, 256, 64  36928       ['activation_16[0][0]']          \n","                                )                                                                 \n","                                                                                                  \n"," batch_normalization_17 (BatchN  (None, 256, 256, 64  256        ['conv2d_17[0][0]']              \n"," ormalization)                  )                                                                 \n","                                                                                                  \n"," activation_17 (Activation)     (None, 256, 256, 64  0           ['batch_normalization_17[0][0]'] \n","                                )                                                                 \n","                                                                                                  \n"," conv2d_18 (Conv2D)             (None, 256, 256, 4)  260         ['activation_17[0][0]']          \n","                                                                                                  \n","==================================================================================================\n","Total params: 31,054,340\n","Trainable params: 31,042,564\n","Non-trainable params: 11,776\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LmcYufmuaeUz","outputId":"e0dab2a2-5ffc-488b-d469-f6f1e814dc29"},"source":["history = model.fit(X_train, y_train_cat, \n","                    batch_size = 16, \n","                    verbose=1, \n","                    epochs=100, \n","                    validation_data=(X_test, y_test_cat), \n","                    shuffle=False)"],"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/100\n","76/76 [==============================] - 149s 1s/step - loss: 0.5831 - accuracy: 0.8212 - val_loss: 6.5050 - val_accuracy: 0.4820\n"]}]},{"cell_type":"code","metadata":{"id":"KQ_NuTmlafmh"},"source":["#Save the model for future use\n","model.save(\"/content/drive/MyDrive/Colab Notebooks/_rice_seedling21.hdf5\")"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iVibZ6c1ao7P"},"source":["###\n","#plot the training and validation accuracy and loss at each epoch\n","loss = history.history['loss']\n","val_loss = history.history['val_loss']\n","epochs = range(1, len(loss) + 1)\n","plt.plot(epochs, loss, 'y', label='Training loss')\n","plt.plot(epochs, val_loss, 'r', label='Validation loss')\n","plt.title('Training and validation loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n","\n","acc = history.history['accuracy']\n","val_acc = history.history['val_accuracy']\n","\n","plt.plot(epochs, acc, 'y', label='Training Accuracy')\n","plt.plot(epochs, val_acc, 'r', label='Validation Accuracy')\n","plt.title('Training and validation Accuracy')\n","plt.xlabel('Epochs')\n","plt.ylabel('Accuracy')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RO7ACKoBapui"},"source":["\n","#Load previously saved model\n","from keras.models import load_model\n","model = load_model(\"/content/drive/MyDrive/Colab Notebooks/_rice_seedling21.hdf5\", compile=False)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UNuftNH18ZoY"},"source":["y_pred=model.predict(X_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"b_SF6IU38cxw"},"source":["y_pred.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"drpgFz-SjPq3"},"source":["y_pred_argmax=np.argmax(y_pred, axis=3)\n","y_pred_argmax.shape"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"5panJLTGawJx"},"source":["#Using built in keras function\n","from keras.metrics import MeanIoU\n","n_classes = 4\n","IOU_keras = MeanIoU(num_classes=n_classes)  \n","IOU_keras.update_state(y_test[:,:,:,0], y_pred_argmax)\n","print(\"Mean IoU =\", IOU_keras.result().numpy())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"hgHHa8q9axAx"},"source":["#To calculate I0U for each class...\n","values = np.array(IOU_keras.get_weights()).reshape(n_classes, n_classes)\n","print(values)\n","class1_IoU = values[0,0]/(values[0,0] + values[0,1] + values[0,2] + values[0,3] + values[1,0]+ values[2,0]+ values[3,0])\n","class2_IoU = values[1,1]/(values[1,1] + values[1,0] + values[1,2] + values[1,3] + values[0,1]+ values[2,1]+ values[3,1])\n","class3_IoU = values[2,2]/(values[2,2] + values[2,0] + values[2,1] + values[2,3] + values[0,2]+ values[1,2]+ values[3,2])\n","class4_IoU = values[3,3]/(values[3,3] + values[3,0] + values[3,1] + values[3,2] + values[0,3]+ values[1,3]+ values[2,3])\n","\n","print(\"IoU for class1 is: \", class1_IoU)\n","print(\"IoU for class2 is: \", class2_IoU)\n","print(\"IoU for class3 is: \", class3_IoU)\n","print(\"IoU for class4 is: \", class4_IoU)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"zW-IdHfAa2f6"},"source":["#Predict on a few images\n","#model = get_model()\n","#model.load_weights(\"/content/drive/MyDrive/Colab Notebooks/_rice_seedling2.hdf5\"')  \n","import random\n","test_img_number = random.randint(0, len(X_test)-1)\n","test_img = X_test[test_img_number]\n","ground_truth=y_test[test_img_number]\n","test_img_norm=test_img[:,:,0][:,:,None]\n","test_img_input=np.expand_dims(test_img_norm, 0)\n","prediction = (model.predict(test_img_input))\n","predicted_img=np.argmax(prediction, axis=3)[0,:,:]\n","\n","\n","\n","plt.figure(figsize=(12, 8))\n","plt.subplot(231)\n","plt.title('Testing Image')\n","plt.imshow(test_img[:,:,0])\n","plt.subplot(232)\n","plt.title('Testing Label')\n","plt.imshow(ground_truth[:,:,0], cmap='jet')\n","plt.subplot(233)\n","plt.title('Prediction on test image')\n","plt.imshow(predicted_img, cmap='jet')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install patchify\n","from patchify import patchify, unpatchify\n","import cv2\n","import numpy as np\n","from matplotlib import pyplot as plt"],"metadata":{"id":"2m_V21Xj_8HT"},"execution_count":null,"outputs":[]}]}